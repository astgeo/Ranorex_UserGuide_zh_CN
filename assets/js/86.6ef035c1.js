(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{649:function(t,a,r){"use strict";r.r(a);var e=r(19),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"译-图像的属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#译-图像的属性"}},[t._v("#")]),t._v(" [译] 图像的属性")]),t._v(" "),r("p",[r("em",[t._v("原文地址 👉 "),r("a",{attrs:{href:"https://www.ranorex.com/help/latest/ranorex-studio-advanced/image-based-automation/image-based-properties/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Image-based properties"),r("OutboundLink")],1)])]),t._v(" "),r("p",[r("em",[t._v("@ translator : "),r("a",{attrs:{href:"https://github.com/taylortaurus",target:"_blank",rel:"noopener noreferrer"}},[t._v("TaylorTaurus"),r("OutboundLink")],1)]),r("br"),t._v(" "),r("em",[t._v("♋ translate time : 2018-9-13")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("本章介绍和解释R​​anorex Studio中基于图像的自动化的预处理方法。在前面的章节中介绍了这些方法的应用，但是本文概述了基本概念和基本功能。本章是一个高级主题，这些概念的知识是可选的。")]),t._v(" "),r("p",[t._v("本章导视，章节内段落跳转推荐使用右上角的锚点！")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"##%E6%89%93%E5%BC%80%E5%9B%BE%E5%83%8F%E7%BC%96%E8%BE%91%E5%99%A8"}},[t._v("打开图像编辑器")])]),t._v(" "),r("li",[r("a",{attrs:{href:"##%E5%9B%BE%E5%83%8F%E7%BC%96%E8%BE%91%E5%8A%9F%E8%83%BD"}},[t._v("图像编辑功能")])])]),t._v(" "),r("h2",{attrs:{id:"预处理缩小"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#预处理缩小"}},[t._v("#")]),t._v(" 预处理缩小")]),t._v(" "),r("p",[t._v("在计算机图形和数字成像中，图像缩放指的是数字图像的大小调整。在缩放矢量图形图像时，可以使用几何变换来缩放构成图像的图形基元，而不会损失图像质量。缩放光栅图形图像时，必须生成具有更高或更低像素数的新图像。在减小像素数量（即按比例缩小，缩小尺寸）的情况下，通常会导致可见的质量损失。")]),t._v(" "),r("h3",{attrs:{id:"在ranorex中的应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在ranorex中的应用"}},[t._v("#")]),t._v(" 在Ranorex中的应用")]),t._v(" "),r("p",[t._v("缩小图像尺寸的主要用途是减少预处理时间。较小的图像可以更快地进行比较和搜索。缩小规模意味着将图像缩小为一系列显着的属性和特征，而不会丢失重要信息。缩小尺寸会使相似但不相同的图像在相似性匹配方面更为接近。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/taylortaurus/RX_UserGuide_GitBook_Picbed/raw/master/Image-basedAutomation/B7050-0000010.png",alt:"B7050-0000010"}}),r("br"),t._v(" "),r("em",[t._v("缩小图像的示例（www.wikipedia.com）")])]),t._v(" "),r("h2",{attrs:{id:"预处理边缘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#预处理边缘"}},[t._v("#")]),t._v(" 预处理边缘")]),t._v(" "),r("p",[t._v("边缘检测是一种用于查找图像内对象边界的图像处理技术。它的工作原理是检测亮度的不连续性。边缘检测用于图像处理，计算机视觉和机器视觉等领域的图像分割和数据提取。简而言之，将边缘检测算法应用于图像通常会显着减少要处理的数据量，从而过滤掉被认为不太相关的信息，同时保留图像的重要结构特性。")]),t._v(" "),r("h3",{attrs:{id:"在ranorex中的应用-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在ranorex中的应用-2"}},[t._v("#")]),t._v(" 在Ranorex中的应用")]),t._v(" "),r("p",[t._v("在Ranorex中，“边缘”检测可以使得图像或子图像的选择更为容易，并且在颜色和亮度方面更加健壮。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/taylortaurus/RX_UserGuide_GitBook_Picbed/raw/master/Image-basedAutomation/B7050-0000020.png",alt:"B7050-0000020"}}),r("br"),t._v(" "),r("em",[t._v("使用和没有使用边缘过滤器的示例图像（www.wikipedia.com）")])]),t._v(" "),r("h2",{attrs:{id:"使用sobel算子预处理边缘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用sobel算子预处理边缘"}},[t._v("#")]),t._v(" 使用Sobel算子预处理边缘")]),t._v(" "),r("p",[t._v("Sobel算子有时被称为Sobel-Feldman算子或Sobel滤波器，用于图像处理和计算机视觉，特别是在边缘检测算法中，它创建强调边缘的图像。Sobel算子是边缘检测和澄清的附加功能。与“边缘”检测一起，该操作使图像检测更加稳健，并且不受颜色，亮度和复杂性的影响。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/taylortaurus/RX_UserGuide_GitBook_Picbed/raw/master/Image-basedAutomation/B7050-0000030.png",alt:"B7050-0000030"}}),r("br"),t._v(" "),r("em",[t._v("使用和没有使用过滤器的图像示例（www.wikipedia.com）")])]),t._v(" "),r("h2",{attrs:{id:"预处理灰度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#预处理灰度"}},[t._v("#")]),t._v(" 预处理灰度")]),t._v(" "),r("p",[t._v("在摄影、计算和比色学中，灰度或灰度图像是指每个像素的值只是代表光量的单一样本，也就是说，它只携带强度信息。灰度图像完全由256种灰度组成，从最弱强度的黑色到最强强度的白色不等。灰度缩放图像是一种常见的原则，使相似但不相等的图像在颜色上更接近，以进行相似匹配。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/taylortaurus/RX_UserGuide_GitBook_Picbed/raw/master/Image-basedAutomation/B7050-0000040.png",alt:"B7050-0000040"}}),r("br"),t._v(" "),r("em",[t._v("灰度图像的概念（www.wikipedia.com）")])]),t._v(" "),r("h2",{attrs:{id:"预处理阈值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#预处理阈值"}},[t._v("#")]),t._v(" 预处理阈值")]),t._v(" "),r("p",[t._v("阈值分割是图像分割中最简单的方法。从一个灰度图像阈值化可以用来创建二值图像。最简单的阈值方法是，如果图像强度小于某个固定常数，则用一个黑色像素替换图像中的每个像素，如果图像强度大于该常数，则用一个白色像素替换。在右边的示例图片中，这导致了黑暗的树变得完全黑，白色的雪变得完全白。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/taylortaurus/RX_UserGuide_GitBook_Picbed/raw/master/Image-basedAutomation/B7050-0000050.png",alt:"B7050-0000050"}}),r("br"),t._v(" "),r("em",[t._v("没有使用和使用过滤器的示例图像（www.wikipedia.com）")])]),t._v(" "),r("h2",{attrs:{id:"相似性系数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相似性系数"}},[t._v("#")]),t._v(" 相似性系数")]),t._v(" "),r("p",[t._v("相似度值可以从0.0调整到1.0。这对应于0 %的相似度(完全不同的图片)和100%相似度(完全相同的图片)。使用0.8或0.9这样的值来确保即使发生了一些表面的变化也能找到图像，这是很诱人的。然而，这些值看起来只是很高。实际上，它们实际上已经很低了。")]),t._v(" "),r("p",[t._v("在0.9相似度下，一幅完全白色的100像素的图片将被认为与一幅有90个白像素和10个黑像素的图片相同。这已经是很大的不同了。当你开始比较几千个像素大小的图像时，光学偏差会更加惊人。")]),t._v(" "),r("h3",{attrs:{id:"相似示例-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相似示例-1"}},[t._v("#")]),t._v(" 相似示例-1")]),t._v(" "),r("p",[t._v("考虑下面图片中的Edge和Internet Explorer图标。它们都在2000像素左右，而且明显不同。0.9的值不能捕捉到这些差异。它会认为它们是匹配的。实际上，你需要0.95的最小值才能将它们视为不同的值。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/taylortaurus/RX_UserGuide_GitBook_Picbed/raw/master/Image-basedAutomation/B7050-0000060.png",alt:"B7050-0000060"}}),r("br"),t._v(" "),r("em",[t._v("Edge和Internet Explorer的程序图标")])]),t._v(" "),r("p",[t._v("这两张图片是相同的图片，相似度值为0.9。因此，我们建议你使用1.0或0.9999的相似度值。为了确保在这些高值中找到你的图像，请确保使用未压缩的图像格式，例如.png和.bmp。在压缩过程中创建的构件使得。jpg格式不合适。")]),t._v(" "),r("p",[t._v("对于数千像素以上的大图片，我们也建议你关闭相似度报告，因为即使在快速的机器上计算也需要很长时间。")]),t._v(" "),r("h3",{attrs:{id:"相似性示例-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相似性示例-2"}},[t._v("#")]),t._v(" 相似性示例-2")]),t._v(" "),r("p",[t._v("相似度定义(以百分比表示)为了通过检查，比较图像需要有多相似。计算每个像素的色差，并总结出平均平方差。")]),t._v(" "),r("p",[r("strong",[t._v("示例")])]),t._v(" "),r("ul",[r("li",[t._v("假设我们比较10x10像素的彩色图像")]),t._v(" "),r("li",[t._v("如果所有像素除了图片A中的一个像素为白色(RGB 255,255,255)和图片B中的一个像素为黑色(RGB 0,0,0)之外都有相同的颜色，那么相似度为99%")]),t._v(" "),r("li",[t._v("如果所有像素除了在pic A中有一个像素是黑色的，在pic B中有一个像素是灰色的(RGB 128,128,128，即50%的色差)，那么相似度为99,75%\n(因为平方误差)")]),t._v(" "),r("li",[t._v("简单地说，如果你比较大的图像，想要找到小的差异，99%的相似度已经是很低的相似度了")])])])}),[],!1,null,null,null);a.default=s.exports}}]);